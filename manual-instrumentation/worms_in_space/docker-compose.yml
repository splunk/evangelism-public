version: '3.8'

services:
  otel-collector:
    image: quay.io/signalfx/splunk-otel-collector:latest
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "13133:13133" # Health check
    environment:
      SPLUNK_REALM: "${SPLUNK_REALM:-us1}"
      SPLUNK_ACCESS_TOKEN: "${SPLUNK_ACCESS_TOKEN}"
    volumes:
      - ./otel-collector-config.yaml:/etc/otel/config.yaml
    command: ["--config", "/etc/otel/config.yaml"]
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:13133/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: worms
      POSTGRES_PASSWORD: spacepass
      POSTGRES_DB: worms_in_space_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U worms -d worms_in_space_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  worms_in_space:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      otel-collector:
        condition: service_started
    environment:
      DATABASE_URL: "ecto://worms:spacepass@postgres/worms_in_space_dev"
      SECRET_KEY_BASE: "your-secret-key-base-here"
      PHX_HOST: "localhost"
      MIX_ENV: "dev"
      # OpenTelemetry Configuration
      OTEL_SERVICE_NAME: "${OTEL_SERVICE_NAME:-worms-in-space-backend}"
      OTEL_ENVIRONMENT: "${OTEL_ENVIRONMENT:-development}"
      OTEL_COLLECTOR_ENDPOINT: "http://otel-collector:4317"
    volumes:
      - ./lib:/app/lib
      - ./config:/app/config
      - ./test:/app/test
      - ./priv:/app/priv
      - ./mix.exs:/app/mix.exs
      - ./mix.lock:/app/mix.lock
      - deps:/app/deps
      - build:/app/_build
    command: sh -c "echo 'Waiting for PostgreSQL...' && while ! pg_isready -h postgres -U worms; do sleep 1; done && echo 'PostgreSQL is ready!' && mix deps.get && mix ecto.create && mix ecto.migrate && mix phx.server"


volumes:
  postgres_data:
  deps:
  build: